//////////////////////////////////////////////////////////////////////////////
//
//  Copyright 2015 Autodesk, Inc.  All rights reserved.
//
//  Use of this software is subject to the terms of the Autodesk license 
//  agreement provided at the time of installation or download, or which 
//  otherwise accompanies this software in either electronic or hard copy form.   
//
//////////////////////////////////////////////////////////////////////////////
#pragma once

// Local
#include "BaseTranslator_to_RTI.h"
// max sdk
#include <RenderingAPI/Translator/GenericTranslatorKeys.h>
// rti
#include <rti/scene/renderoptions.h>

namespace Max
{;
namespace RapidRTTranslator
{;

using namespace MaxSDK::RenderingAPI;

// Translates: rti::RenderOptions
class Translator_RTIRenderOptions :
	public BaseTranslator_to_RTI
{
public:

    typedef GenericTranslatorKey_Empty<Translator_RTIRenderOptions> Key;

	Translator_RTIRenderOptions(const Key& key, TranslatorGraphNode& translator_graph_node);
	~Translator_RTIRenderOptions();

    // Accesses the outputs generated by this translator
    rti::RenderOptionsHandle get_output_render_options() const;

    // -- inherited from Translator
    virtual TranslationResult Translate(const TimeValue t, Interval& validity, ITranslationProgress& translation_progress, KeyframeList& keyframesNeeded) override;
    virtual Interval CheckValidity(const TimeValue t, const Interval& previous_validity) const override;
    virtual void PreTranslate(const TimeValue translationTime, Interval& validity) override;
    virtual void PostTranslate(const TimeValue translationTime, Interval& validity) override;
    virtual MSTR GetTimingCategory() const override;

private:

    // Figures out what physical value gets mapped to white by the exposure control.
    // Returns false if no valid value could be found.
    bool get_physical_value_for_white(float& value, const TimeValue t, Interval& valid) const;
};

}}	// namespace 

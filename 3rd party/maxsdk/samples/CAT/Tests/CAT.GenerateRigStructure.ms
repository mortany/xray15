include "CAT.RigStructure.ms"
include "CAT.UtilityFns.ms"

-- Write the MS code to outfile to create a HubStruct, and return the name of it.
fn WriteHubGroup pHub outfile = 
(
	hubName = pHub.name
	format (hubName + " = HubStruct()\n") to:outfile
	format (hubName + ".name = \"" + pHub.node.name + "\"\n") to:outfile
	
	for i = 1 to pHub.Limbs.Count do (
		pLimb = pHub.Limbs[i]
		print "I is here"
		limbName = WriteLimbGroup pLimb outfile
		format (hubName + ".Limbs[" + i as string + "] = " + limbName + "\n") to:outfile
	)
	
	for i = 1 to pHub.Tails.Count do 
	(
		tailName = WriteTailGroup pHub.Tails[i] outfile
		format (hubName + ".Tails[" + i as string + "] = " + tailName + "\n") to:outfile
	)
	
	for i = 1 to pHub.Spines.Count do 
	(
		childHub = pHub.spines[i].tiphub
		childHubName = WriteHubGroup childHub outfile
		format (hubName + ".Spines[" + i as string + "] = " + childHubName + "\n") to:outfile
	)
	
	hubName -- return hubname
)

fn WritePalmGroup pPalm outfile = 
(
	strName = ""
	if PropertyExists pPalm "Name" then
		strName = pPalm.Name
	else
		strName = "thePalmCAT1" --pPalm.Name
		
	format (strName + " = PalmAnkleStruct()\n") to:outfile
	format (strName + ".name = \"" + pPalm.node.name + "\"\n") to:outfile
	
	if PropertyExists pPalm "Digits" then
	(
		for i = 1 to pPalm.digits.count do 
		(
			format (strName + ".digits[" + i as string + "] = #()\n") to:outfile
			
			digit = pPalm.digits[i]
			for j = 1 to digit.bones.count do 
			(
				format (strName + ".digits[" + i as string + "][" + j as string + "] = \"" + digit.bones[j].node.name + "\"\n") to:outfile
			)
		)
	)
	else
	(
		for i = 1 to pPalm.digitdata.count do 
		(
			format (strName + ".digits[" + i as string + "] = #()\n") to:outfile
			
			digit = pPalm.digitdata[i]
			for j = 1 to digit.DigitSegTrans.count do 
			(
				format (strName + ".digits[" + i as string + "][" + j as string + "] = \"" + digit.DigitSegTrans[j].node.name + "\"\n") to:outfile
			)
		)
	)
	strName
)

fn WriteLimbGroup pLimb outfile = 
(
	strName = ""
	if PropertyExists pLimb "Name" then
		strName = pLimb.Name
	else
		strName = pLimb.LimbName
	
	format (strName + " = LimbStruct()\n") to:outfile
	format (strName + ".name = \"" + strName + "\"\n") to:outfile
	format (strName + ".LMR = " + (pLimb.LMR as string) + "\n") to:outfile
	
	for i = 1 to pLimb.bones.count do 
	(
		format (strName + ".Bones[" + i as string + "] = \"" + pLimb.bones[i].SegNodeTab[1].name + "\"\n") to:outfile
	)
	
	if (PropertyExists pLimb "CollarboneTrans") then
	(
		if (pLimb.CollarboneTrans!= undefined) do
		(
			format (strName + ".collarbone = \"" + pLimb.CollarboneTrans.node.name + "\"\n") to:outfile
		)
	)
	else 
	(
		if (pLimb.collarbone != undefined) do
		(
			format (strName + ".collarbone = \"" + pLimb.Collarbone.node.name + "\"\n") to:outfile
		)
	)
	
	if (PropertyExists pLimb "PalmTrans") then
	(
		if (pLimb.PalmTrans != undefined) do
		(
			local palmVar = WritePalmGroup pLimb.PalmTrans outfile
			format (strName + ".Palm = " + palmVar + "\n") to:outfile
		)
	)
	else
	(
		if (pLimb.palm != undefined) do
		(
			local palmVar = WritePalmGroup pLimb.palm outfile
			format (strName + ".Palm = " + palmVar + "\n") to:outfile
		)
	)
	
	if (PropertyExists pLimb "IKTarget ") then
	(
		if (pLimb.IKTarget != undefined) do
		(
			format (strName + ".IKTarget= \"" + pLimb.IKTarget.name + "\"\n") to:outfile
		)
	)
	else
	(
		if (pLimb.PalmTrans != undefined and pLimb.PalmTrans.IKTarget != undefined) do
		(
			format (strName + ".IKTarget= \"" + pLimb.PalmTrans.IKTarget.name + "\"\n") to:outfile

		)	
	)
	
	strName -- return limbName
)

fn WriteTailGroup pTail pHubName =
(
	strName =  pTail.Name
	format (strName + " = TailStruct()\n") to:outfile
	format (strName + ".name = \"" + strName + "\"\n") to:outfile
	
	for i = 1 to pTail.bones.count do 
	(
		format (strName + ".Bones[" + i as string + "] = \"" + pTail.bones[i].node.name + "\"\n") to:outfile
	)
	strName
)

fn WriteRigNameStruct pCATParent outfilename = 
(
	
	outfile = createfile outfilename 
	format ("-- AutoGenerated rig description: file " + maxFileName + " CATParent: " + pCATParent.name) to:outfile
	format ("\ninclude \"CAT.RigStructure.ms\"\n") to:outfile

	pBaseHub = pCATParent.roothub;
	hubName = WriteHubGroup pBaseHub outfile
	
	format ("pRootNode = " + hubName) to:outfile
	close outfile
)
